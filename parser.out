Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     program -> error
Rule 4     statement -> INTEGER command NEWLINE
Rule 5     statement -> RUN NEWLINE
Rule 6     statement -> LIST NEWLINE
Rule 7     statement -> NEW NEWLINE
Rule 8     statement -> INTEGER NEWLINE
Rule 9     statement -> INTEGER error NEWLINE
Rule 10    statement -> NEWLINE
Rule 11    command -> LET variable EQUALS expr
Rule 12    command -> LET variable EQUALS error
Rule 13    command -> READ varlist
Rule 14    command -> READ error
Rule 15    command -> DATA numlist
Rule 16    command -> DATA error
Rule 17    command -> PRINT plist optend
Rule 18    command -> OUT expr EQUALS plist
Rule 19    command -> DELAY expr
Rule 20    command -> LETSTR variable EQUALS plist
Rule 21    command -> CHECK plist
Rule 22    command -> CLEAR plist
Rule 23    command -> PRINT error
Rule 24    optend -> COMMA
Rule 25    optend -> SEMI
Rule 26    optend -> <empty>
Rule 27    command -> PRINT
Rule 28    command -> GOTO INTEGER
Rule 29    command -> GOTO error
Rule 30    command -> IF relexpr THEN INTEGER
Rule 31    command -> IF error THEN INTEGER
Rule 32    command -> IF relexpr THEN error
Rule 33    command -> FOR ID EQUALS expr TO expr optstep
Rule 34    command -> FOR ID EQUALS error TO expr optstep
Rule 35    command -> FOR ID EQUALS expr TO error optstep
Rule 36    command -> FOR ID EQUALS expr TO expr STEP error
Rule 37    optstep -> STEP expr
Rule 38    optstep -> empty
Rule 39    command -> NEXT ID
Rule 40    command -> NEXT error
Rule 41    command -> END
Rule 42    command -> REM
Rule 43    command -> STOP
Rule 44    command -> DEF ID LPAREN ID RPAREN EQUALS expr
Rule 45    command -> DEF ID LPAREN ID RPAREN EQUALS error
Rule 46    command -> DEF ID LPAREN error RPAREN EQUALS expr
Rule 47    command -> GOSUB INTEGER
Rule 48    command -> GOSUB error
Rule 49    command -> RETURN
Rule 50    command -> DIM dimlist
Rule 51    command -> DIM error
Rule 52    dimlist -> dimlist COMMA dimitem
Rule 53    dimlist -> dimitem
Rule 54    dimitem -> ID LPAREN INTEGER RPAREN
Rule 55    dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN
Rule 56    expr -> expr PLUS expr
Rule 57    expr -> expr MINUS expr
Rule 58    expr -> expr TIMES expr
Rule 59    expr -> expr DIVIDE expr
Rule 60    expr -> expr POWER expr
Rule 61    expr -> INTEGER
Rule 62    expr -> FLOAT
Rule 63    expr -> variable
Rule 64    expr -> LPAREN expr RPAREN
Rule 65    expr -> MINUS expr
Rule 66    relexpr -> expr LT expr
Rule 67    relexpr -> expr LE expr
Rule 68    relexpr -> expr GT expr
Rule 69    relexpr -> expr GE expr
Rule 70    relexpr -> expr EQUALS expr
Rule 71    relexpr -> expr NE expr
Rule 72    variable -> ID
Rule 73    variable -> ID LPAREN expr RPAREN
Rule 74    variable -> ID LPAREN expr COMMA expr RPAREN
Rule 75    varlist -> varlist COMMA variable
Rule 76    varlist -> variable
Rule 77    numlist -> numlist COMMA number
Rule 78    numlist -> number
Rule 79    number -> INTEGER
Rule 80    number -> FLOAT
Rule 81    number -> MINUS INTEGER
Rule 82    number -> MINUS FLOAT
Rule 83    plist -> plist COMMA pitem
Rule 84    plist -> pitem
Rule 85    pitem -> STRING
Rule 86    pitem -> STRING expr
Rule 87    pitem -> expr
Rule 88    empty -> <empty>

Terminals, with rules where they appear

CHECK                : 21
CLEAR                : 22
COMMA                : 24 52 55 74 75 77 83
DATA                 : 15 16
DEF                  : 44 45 46
DELAY                : 19
DIM                  : 50 51
DIVIDE               : 59
END                  : 41
EQUALS               : 11 12 18 20 33 34 35 36 44 45 46 70
FLOAT                : 62 80 82
FOR                  : 33 34 35 36
GE                   : 69
GOSUB                : 47 48
GOTO                 : 28 29
GT                   : 68
ID                   : 33 34 35 36 39 44 44 45 45 46 54 55 72 73 74
IF                   : 30 31 32
INTEGER              : 4 8 9 28 30 31 47 54 55 55 61 79 81
LE                   : 67
LET                  : 11 12
LETSTR               : 20
LIST                 : 6
LPAREN               : 44 45 46 54 55 64 73 74
LT                   : 66
MINUS                : 57 65 81 82
NE                   : 71
NEW                  : 7
NEWLINE              : 4 5 6 7 8 9 10
NEXT                 : 39 40
OUT                  : 18
PLUS                 : 56
POWER                : 60
PRINT                : 17 23 27
READ                 : 13 14
REM                  : 42
RETURN               : 49
RPAREN               : 44 45 46 54 55 64 73 74
RUN                  : 5
SEMI                 : 25
STEP                 : 36 37
STOP                 : 43
STRING               : 85 86
THEN                 : 30 31 32
TIMES                : 58
TO                   : 33 34 35 36
error                : 3 9 12 14 16 23 29 31 32 34 35 36 40 45 46 48 51

Nonterminals, with rules where they appear

command              : 4
dimitem              : 52 53
dimlist              : 50 52
empty                : 38
expr                 : 11 18 19 33 33 34 35 36 36 37 44 46 56 56 57 57 58 58 59 59 60 60 64 65 66 66 67 67 68 68 69 69 70 70 71 71 73 74 74 86 87
number               : 77 78
numlist              : 15 77
optend               : 17
optstep              : 33 34 35
pitem                : 83 84
plist                : 17 18 20 21 22 83
program              : 1 0
relexpr              : 30 32
statement            : 1 2
variable             : 11 12 20 63 75 76
varlist              : 13 75

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) program -> . error
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    error           shift and go to state 7
    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    program                        shift and go to state 5
    statement                      shift and go to state 6

state 1

    (7) statement -> NEW . NEWLINE

    NEWLINE         shift and go to state 9


state 2

    (5) statement -> RUN . NEWLINE

    NEWLINE         shift and go to state 10


state 3

    (10) statement -> NEWLINE .

    INTEGER         reduce using rule 10 (statement -> NEWLINE .)
    RUN             reduce using rule 10 (statement -> NEWLINE .)
    LIST            reduce using rule 10 (statement -> NEWLINE .)
    NEW             reduce using rule 10 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> NEWLINE .)
    $end            reduce using rule 10 (statement -> NEWLINE .)


state 4

    (6) statement -> LIST . NEWLINE

    NEWLINE         shift and go to state 11


state 5

    (0) S' -> program .
    (1) program -> program . statement
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    statement                      shift and go to state 12

state 6

    (2) program -> statement .

    INTEGER         reduce using rule 2 (program -> statement .)
    RUN             reduce using rule 2 (program -> statement .)
    LIST            reduce using rule 2 (program -> statement .)
    NEW             reduce using rule 2 (program -> statement .)
    NEWLINE         reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 7

    (3) program -> error .

    INTEGER         reduce using rule 3 (program -> error .)
    RUN             reduce using rule 3 (program -> error .)
    LIST            reduce using rule 3 (program -> error .)
    NEW             reduce using rule 3 (program -> error .)
    NEWLINE         reduce using rule 3 (program -> error .)
    $end            reduce using rule 3 (program -> error .)


state 8

    (4) statement -> INTEGER . command NEWLINE
    (8) statement -> INTEGER . NEWLINE
    (9) statement -> INTEGER . error NEWLINE
    (11) command -> . LET variable EQUALS expr
    (12) command -> . LET variable EQUALS error
    (13) command -> . READ varlist
    (14) command -> . READ error
    (15) command -> . DATA numlist
    (16) command -> . DATA error
    (17) command -> . PRINT plist optend
    (18) command -> . OUT expr EQUALS plist
    (19) command -> . DELAY expr
    (20) command -> . LETSTR variable EQUALS plist
    (21) command -> . CHECK plist
    (22) command -> . CLEAR plist
    (23) command -> . PRINT error
    (27) command -> . PRINT
    (28) command -> . GOTO INTEGER
    (29) command -> . GOTO error
    (30) command -> . IF relexpr THEN INTEGER
    (31) command -> . IF error THEN INTEGER
    (32) command -> . IF relexpr THEN error
    (33) command -> . FOR ID EQUALS expr TO expr optstep
    (34) command -> . FOR ID EQUALS error TO expr optstep
    (35) command -> . FOR ID EQUALS expr TO error optstep
    (36) command -> . FOR ID EQUALS expr TO expr STEP error
    (39) command -> . NEXT ID
    (40) command -> . NEXT error
    (41) command -> . END
    (42) command -> . REM
    (43) command -> . STOP
    (44) command -> . DEF ID LPAREN ID RPAREN EQUALS expr
    (45) command -> . DEF ID LPAREN ID RPAREN EQUALS error
    (46) command -> . DEF ID LPAREN error RPAREN EQUALS expr
    (47) command -> . GOSUB INTEGER
    (48) command -> . GOSUB error
    (49) command -> . RETURN
    (50) command -> . DIM dimlist
    (51) command -> . DIM error

    NEWLINE         shift and go to state 22
    error           shift and go to state 35
    LET             shift and go to state 33
    READ            shift and go to state 15
    DATA            shift and go to state 21
    PRINT           shift and go to state 19
    OUT             shift and go to state 26
    DELAY           shift and go to state 17
    LETSTR          shift and go to state 34
    CHECK           shift and go to state 25
    CLEAR           shift and go to state 31
    GOTO            shift and go to state 29
    IF              shift and go to state 32
    FOR             shift and go to state 30
    NEXT            shift and go to state 23
    END             shift and go to state 28
    REM             shift and go to state 18
    STOP            shift and go to state 16
    DEF             shift and go to state 20
    GOSUB           shift and go to state 27
    RETURN          shift and go to state 13
    DIM             shift and go to state 14

    command                        shift and go to state 24

state 9

    (7) statement -> NEW NEWLINE .

    INTEGER         reduce using rule 7 (statement -> NEW NEWLINE .)
    RUN             reduce using rule 7 (statement -> NEW NEWLINE .)
    LIST            reduce using rule 7 (statement -> NEW NEWLINE .)
    NEW             reduce using rule 7 (statement -> NEW NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> NEW NEWLINE .)
    $end            reduce using rule 7 (statement -> NEW NEWLINE .)


state 10

    (5) statement -> RUN NEWLINE .

    INTEGER         reduce using rule 5 (statement -> RUN NEWLINE .)
    RUN             reduce using rule 5 (statement -> RUN NEWLINE .)
    LIST            reduce using rule 5 (statement -> RUN NEWLINE .)
    NEW             reduce using rule 5 (statement -> RUN NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> RUN NEWLINE .)
    $end            reduce using rule 5 (statement -> RUN NEWLINE .)


state 11

    (6) statement -> LIST NEWLINE .

    INTEGER         reduce using rule 6 (statement -> LIST NEWLINE .)
    RUN             reduce using rule 6 (statement -> LIST NEWLINE .)
    LIST            reduce using rule 6 (statement -> LIST NEWLINE .)
    NEW             reduce using rule 6 (statement -> LIST NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> LIST NEWLINE .)
    $end            reduce using rule 6 (statement -> LIST NEWLINE .)


state 12

    (1) program -> program statement .

    INTEGER         reduce using rule 1 (program -> program statement .)
    RUN             reduce using rule 1 (program -> program statement .)
    LIST            reduce using rule 1 (program -> program statement .)
    NEW             reduce using rule 1 (program -> program statement .)
    NEWLINE         reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 13

    (49) command -> RETURN .

    NEWLINE         reduce using rule 49 (command -> RETURN .)


state 14

    (50) command -> DIM . dimlist
    (51) command -> DIM . error
    (52) dimlist -> . dimlist COMMA dimitem
    (53) dimlist -> . dimitem
    (54) dimitem -> . ID LPAREN INTEGER RPAREN
    (55) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    error           shift and go to state 38
    ID              shift and go to state 39

    dimitem                        shift and go to state 36
    dimlist                        shift and go to state 37

state 15

    (13) command -> READ . varlist
    (14) command -> READ . error
    (75) varlist -> . varlist COMMA variable
    (76) varlist -> . variable
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 41
    ID              shift and go to state 43

    varlist                        shift and go to state 40
    variable                       shift and go to state 42

state 16

    (43) command -> STOP .

    NEWLINE         reduce using rule 43 (command -> STOP .)


state 17

    (19) command -> DELAY . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 44

state 18

    (42) command -> REM .

    NEWLINE         reduce using rule 42 (command -> REM .)


state 19

    (17) command -> PRINT . plist optend
    (23) command -> PRINT . error
    (27) command -> PRINT .
    (83) plist -> . plist COMMA pitem
    (84) plist -> . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 53
    NEWLINE         reduce using rule 27 (command -> PRINT .)
    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 50
    expr                           shift and go to state 52
    plist                          shift and go to state 54
    variable                       shift and go to state 47

state 20

    (44) command -> DEF . ID LPAREN ID RPAREN EQUALS expr
    (45) command -> DEF . ID LPAREN ID RPAREN EQUALS error
    (46) command -> DEF . ID LPAREN error RPAREN EQUALS expr

    ID              shift and go to state 55


state 21

    (15) command -> DATA . numlist
    (16) command -> DATA . error
    (77) numlist -> . numlist COMMA number
    (78) numlist -> . number
    (79) number -> . INTEGER
    (80) number -> . FLOAT
    (81) number -> . MINUS INTEGER
    (82) number -> . MINUS FLOAT

    error           shift and go to state 58
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 56
    MINUS           shift and go to state 60

    number                         shift and go to state 57
    numlist                        shift and go to state 61

state 22

    (8) statement -> INTEGER NEWLINE .

    INTEGER         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    RUN             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    LIST            reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEW             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    $end            reduce using rule 8 (statement -> INTEGER NEWLINE .)


state 23

    (39) command -> NEXT . ID
    (40) command -> NEXT . error

    ID              shift and go to state 63
    error           shift and go to state 62


state 24

    (4) statement -> INTEGER command . NEWLINE

    NEWLINE         shift and go to state 64


state 25

    (21) command -> CHECK . plist
    (83) plist -> . plist COMMA pitem
    (84) plist -> . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 50
    expr                           shift and go to state 52
    variable                       shift and go to state 47
    plist                          shift and go to state 65

state 26

    (18) command -> OUT . expr EQUALS plist
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 66

state 27

    (47) command -> GOSUB . INTEGER
    (48) command -> GOSUB . error

    INTEGER         shift and go to state 68
    error           shift and go to state 67


state 28

    (41) command -> END .

    NEWLINE         reduce using rule 41 (command -> END .)


state 29

    (28) command -> GOTO . INTEGER
    (29) command -> GOTO . error

    INTEGER         shift and go to state 69
    error           shift and go to state 70


state 30

    (33) command -> FOR . ID EQUALS expr TO expr optstep
    (34) command -> FOR . ID EQUALS error TO expr optstep
    (35) command -> FOR . ID EQUALS expr TO error optstep
    (36) command -> FOR . ID EQUALS expr TO expr STEP error

    ID              shift and go to state 71


state 31

    (22) command -> CLEAR . plist
    (83) plist -> . plist COMMA pitem
    (84) plist -> . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 50
    expr                           shift and go to state 52
    variable                       shift and go to state 47
    plist                          shift and go to state 72

state 32

    (30) command -> IF . relexpr THEN INTEGER
    (31) command -> IF . error THEN INTEGER
    (32) command -> IF . relexpr THEN error
    (66) relexpr -> . expr LT expr
    (67) relexpr -> . expr LE expr
    (68) relexpr -> . expr GT expr
    (69) relexpr -> . expr GE expr
    (70) relexpr -> . expr EQUALS expr
    (71) relexpr -> . expr NE expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 75
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 74
    relexpr                        shift and go to state 73

state 33

    (11) command -> LET . variable EQUALS expr
    (12) command -> LET . variable EQUALS error
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 43

    variable                       shift and go to state 76

state 34

    (20) command -> LETSTR . variable EQUALS plist
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 43

    variable                       shift and go to state 77

state 35

    (9) statement -> INTEGER error . NEWLINE

    NEWLINE         shift and go to state 78


state 36

    (53) dimlist -> dimitem .

    COMMA           reduce using rule 53 (dimlist -> dimitem .)
    NEWLINE         reduce using rule 53 (dimlist -> dimitem .)


state 37

    (50) command -> DIM dimlist .
    (52) dimlist -> dimlist . COMMA dimitem

    NEWLINE         reduce using rule 50 (command -> DIM dimlist .)
    COMMA           shift and go to state 79


state 38

    (51) command -> DIM error .

    NEWLINE         reduce using rule 51 (command -> DIM error .)


state 39

    (54) dimitem -> ID . LPAREN INTEGER RPAREN
    (55) dimitem -> ID . LPAREN INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 80


state 40

    (13) command -> READ varlist .
    (75) varlist -> varlist . COMMA variable

    NEWLINE         reduce using rule 13 (command -> READ varlist .)
    COMMA           shift and go to state 81


state 41

    (14) command -> READ error .

    NEWLINE         reduce using rule 14 (command -> READ error .)


state 42

    (76) varlist -> variable .

    COMMA           reduce using rule 76 (varlist -> variable .)
    NEWLINE         reduce using rule 76 (varlist -> variable .)


state 43

    (72) variable -> ID .
    (73) variable -> ID . LPAREN expr RPAREN
    (74) variable -> ID . LPAREN expr COMMA expr RPAREN

    STEP            reduce using rule 72 (variable -> ID .)
    PLUS            reduce using rule 72 (variable -> ID .)
    MINUS           reduce using rule 72 (variable -> ID .)
    TIMES           reduce using rule 72 (variable -> ID .)
    DIVIDE          reduce using rule 72 (variable -> ID .)
    POWER           reduce using rule 72 (variable -> ID .)
    NEWLINE         reduce using rule 72 (variable -> ID .)
    COMMA           reduce using rule 72 (variable -> ID .)
    THEN            reduce using rule 72 (variable -> ID .)
    EQUALS          reduce using rule 72 (variable -> ID .)
    LT              reduce using rule 72 (variable -> ID .)
    LE              reduce using rule 72 (variable -> ID .)
    GT              reduce using rule 72 (variable -> ID .)
    GE              reduce using rule 72 (variable -> ID .)
    NE              reduce using rule 72 (variable -> ID .)
    SEMI            reduce using rule 72 (variable -> ID .)
    RPAREN          reduce using rule 72 (variable -> ID .)
    TO              reduce using rule 72 (variable -> ID .)
    LPAREN          shift and go to state 82


state 44

    (19) command -> DELAY expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    NEWLINE         reduce using rule 19 (command -> DELAY expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 45

    (62) expr -> FLOAT .

    PLUS            reduce using rule 62 (expr -> FLOAT .)
    MINUS           reduce using rule 62 (expr -> FLOAT .)
    TIMES           reduce using rule 62 (expr -> FLOAT .)
    DIVIDE          reduce using rule 62 (expr -> FLOAT .)
    POWER           reduce using rule 62 (expr -> FLOAT .)
    NEWLINE         reduce using rule 62 (expr -> FLOAT .)
    COMMA           reduce using rule 62 (expr -> FLOAT .)
    SEMI            reduce using rule 62 (expr -> FLOAT .)
    EQUALS          reduce using rule 62 (expr -> FLOAT .)
    LT              reduce using rule 62 (expr -> FLOAT .)
    LE              reduce using rule 62 (expr -> FLOAT .)
    GT              reduce using rule 62 (expr -> FLOAT .)
    GE              reduce using rule 62 (expr -> FLOAT .)
    NE              reduce using rule 62 (expr -> FLOAT .)
    RPAREN          reduce using rule 62 (expr -> FLOAT .)
    TO              reduce using rule 62 (expr -> FLOAT .)
    THEN            reduce using rule 62 (expr -> FLOAT .)
    STEP            reduce using rule 62 (expr -> FLOAT .)


state 46

    (64) expr -> LPAREN . expr RPAREN
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 88

state 47

    (63) expr -> variable .

    PLUS            reduce using rule 63 (expr -> variable .)
    MINUS           reduce using rule 63 (expr -> variable .)
    TIMES           reduce using rule 63 (expr -> variable .)
    DIVIDE          reduce using rule 63 (expr -> variable .)
    POWER           reduce using rule 63 (expr -> variable .)
    NEWLINE         reduce using rule 63 (expr -> variable .)
    COMMA           reduce using rule 63 (expr -> variable .)
    SEMI            reduce using rule 63 (expr -> variable .)
    EQUALS          reduce using rule 63 (expr -> variable .)
    LT              reduce using rule 63 (expr -> variable .)
    LE              reduce using rule 63 (expr -> variable .)
    GT              reduce using rule 63 (expr -> variable .)
    GE              reduce using rule 63 (expr -> variable .)
    NE              reduce using rule 63 (expr -> variable .)
    RPAREN          reduce using rule 63 (expr -> variable .)
    TO              reduce using rule 63 (expr -> variable .)
    THEN            reduce using rule 63 (expr -> variable .)
    STEP            reduce using rule 63 (expr -> variable .)


state 48

    (61) expr -> INTEGER .

    PLUS            reduce using rule 61 (expr -> INTEGER .)
    MINUS           reduce using rule 61 (expr -> INTEGER .)
    TIMES           reduce using rule 61 (expr -> INTEGER .)
    DIVIDE          reduce using rule 61 (expr -> INTEGER .)
    POWER           reduce using rule 61 (expr -> INTEGER .)
    NEWLINE         reduce using rule 61 (expr -> INTEGER .)
    COMMA           reduce using rule 61 (expr -> INTEGER .)
    SEMI            reduce using rule 61 (expr -> INTEGER .)
    EQUALS          reduce using rule 61 (expr -> INTEGER .)
    LT              reduce using rule 61 (expr -> INTEGER .)
    LE              reduce using rule 61 (expr -> INTEGER .)
    GT              reduce using rule 61 (expr -> INTEGER .)
    GE              reduce using rule 61 (expr -> INTEGER .)
    NE              reduce using rule 61 (expr -> INTEGER .)
    RPAREN          reduce using rule 61 (expr -> INTEGER .)
    TO              reduce using rule 61 (expr -> INTEGER .)
    THEN            reduce using rule 61 (expr -> INTEGER .)
    STEP            reduce using rule 61 (expr -> INTEGER .)


state 49

    (65) expr -> MINUS . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 89

state 50

    (84) plist -> pitem .

    COMMA           reduce using rule 84 (plist -> pitem .)
    NEWLINE         reduce using rule 84 (plist -> pitem .)
    SEMI            reduce using rule 84 (plist -> pitem .)


state 51

    (85) pitem -> STRING .
    (86) pitem -> STRING . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    COMMA           reduce using rule 85 (pitem -> STRING .)
    SEMI            reduce using rule 85 (pitem -> STRING .)
    NEWLINE         reduce using rule 85 (pitem -> STRING .)
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 90

state 52

    (87) pitem -> expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    COMMA           reduce using rule 87 (pitem -> expr .)
    SEMI            reduce using rule 87 (pitem -> expr .)
    NEWLINE         reduce using rule 87 (pitem -> expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 53

    (23) command -> PRINT error .

    NEWLINE         reduce using rule 23 (command -> PRINT error .)


state 54

    (17) command -> PRINT plist . optend
    (83) plist -> plist . COMMA pitem
    (24) optend -> . COMMA
    (25) optend -> . SEMI
    (26) optend -> .

    COMMA           shift and go to state 92
    SEMI            shift and go to state 91
    NEWLINE         reduce using rule 26 (optend -> .)

    optend                         shift and go to state 93

state 55

    (44) command -> DEF ID . LPAREN ID RPAREN EQUALS expr
    (45) command -> DEF ID . LPAREN ID RPAREN EQUALS error
    (46) command -> DEF ID . LPAREN error RPAREN EQUALS expr

    LPAREN          shift and go to state 94


state 56

    (80) number -> FLOAT .

    COMMA           reduce using rule 80 (number -> FLOAT .)
    NEWLINE         reduce using rule 80 (number -> FLOAT .)


state 57

    (78) numlist -> number .

    COMMA           reduce using rule 78 (numlist -> number .)
    NEWLINE         reduce using rule 78 (numlist -> number .)


state 58

    (16) command -> DATA error .

    NEWLINE         reduce using rule 16 (command -> DATA error .)


state 59

    (79) number -> INTEGER .

    COMMA           reduce using rule 79 (number -> INTEGER .)
    NEWLINE         reduce using rule 79 (number -> INTEGER .)


state 60

    (81) number -> MINUS . INTEGER
    (82) number -> MINUS . FLOAT

    INTEGER         shift and go to state 95
    FLOAT           shift and go to state 96


state 61

    (15) command -> DATA numlist .
    (77) numlist -> numlist . COMMA number

    NEWLINE         reduce using rule 15 (command -> DATA numlist .)
    COMMA           shift and go to state 97


state 62

    (40) command -> NEXT error .

    NEWLINE         reduce using rule 40 (command -> NEXT error .)


state 63

    (39) command -> NEXT ID .

    NEWLINE         reduce using rule 39 (command -> NEXT ID .)


state 64

    (4) statement -> INTEGER command NEWLINE .

    INTEGER         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    RUN             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    LIST            reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEW             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    $end            reduce using rule 4 (statement -> INTEGER command NEWLINE .)


state 65

    (21) command -> CHECK plist .
    (83) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 21 (command -> CHECK plist .)
    COMMA           shift and go to state 98


state 66

    (18) command -> OUT expr . EQUALS plist
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    EQUALS          shift and go to state 99
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 67

    (48) command -> GOSUB error .

    NEWLINE         reduce using rule 48 (command -> GOSUB error .)


state 68

    (47) command -> GOSUB INTEGER .

    NEWLINE         reduce using rule 47 (command -> GOSUB INTEGER .)


state 69

    (28) command -> GOTO INTEGER .

    NEWLINE         reduce using rule 28 (command -> GOTO INTEGER .)


state 70

    (29) command -> GOTO error .

    NEWLINE         reduce using rule 29 (command -> GOTO error .)


state 71

    (33) command -> FOR ID . EQUALS expr TO expr optstep
    (34) command -> FOR ID . EQUALS error TO expr optstep
    (35) command -> FOR ID . EQUALS expr TO error optstep
    (36) command -> FOR ID . EQUALS expr TO expr STEP error

    EQUALS          shift and go to state 100


state 72

    (22) command -> CLEAR plist .
    (83) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 22 (command -> CLEAR plist .)
    COMMA           shift and go to state 98


state 73

    (30) command -> IF relexpr . THEN INTEGER
    (32) command -> IF relexpr . THEN error

    THEN            shift and go to state 101


state 74

    (66) relexpr -> expr . LT expr
    (67) relexpr -> expr . LE expr
    (68) relexpr -> expr . GT expr
    (69) relexpr -> expr . GE expr
    (70) relexpr -> expr . EQUALS expr
    (71) relexpr -> expr . NE expr
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    LT              shift and go to state 106
    LE              shift and go to state 102
    GT              shift and go to state 107
    GE              shift and go to state 103
    EQUALS          shift and go to state 104
    NE              shift and go to state 105
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 75

    (31) command -> IF error . THEN INTEGER

    THEN            shift and go to state 108


state 76

    (11) command -> LET variable . EQUALS expr
    (12) command -> LET variable . EQUALS error

    EQUALS          shift and go to state 109


state 77

    (20) command -> LETSTR variable . EQUALS plist

    EQUALS          shift and go to state 110


state 78

    (9) statement -> INTEGER error NEWLINE .

    INTEGER         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    RUN             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    LIST            reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEW             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    $end            reduce using rule 9 (statement -> INTEGER error NEWLINE .)


state 79

    (52) dimlist -> dimlist COMMA . dimitem
    (54) dimitem -> . ID LPAREN INTEGER RPAREN
    (55) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    ID              shift and go to state 39

    dimitem                        shift and go to state 111

state 80

    (54) dimitem -> ID LPAREN . INTEGER RPAREN
    (55) dimitem -> ID LPAREN . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 112


state 81

    (75) varlist -> varlist COMMA . variable
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 43

    variable                       shift and go to state 113

state 82

    (73) variable -> ID LPAREN . expr RPAREN
    (74) variable -> ID LPAREN . expr COMMA expr RPAREN
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 114

state 83

    (59) expr -> expr DIVIDE . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 115

state 84

    (60) expr -> expr POWER . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 116

state 85

    (58) expr -> expr TIMES . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 117

state 86

    (56) expr -> expr PLUS . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 118

state 87

    (57) expr -> expr MINUS . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 119

state 88

    (64) expr -> LPAREN expr . RPAREN
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 89

    (65) expr -> MINUS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 65 (expr -> MINUS expr .)
    MINUS           reduce using rule 65 (expr -> MINUS expr .)
    TIMES           reduce using rule 65 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 65 (expr -> MINUS expr .)
    POWER           reduce using rule 65 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 65 (expr -> MINUS expr .)
    COMMA           reduce using rule 65 (expr -> MINUS expr .)
    SEMI            reduce using rule 65 (expr -> MINUS expr .)
    EQUALS          reduce using rule 65 (expr -> MINUS expr .)
    LT              reduce using rule 65 (expr -> MINUS expr .)
    LE              reduce using rule 65 (expr -> MINUS expr .)
    GT              reduce using rule 65 (expr -> MINUS expr .)
    GE              reduce using rule 65 (expr -> MINUS expr .)
    NE              reduce using rule 65 (expr -> MINUS expr .)
    RPAREN          reduce using rule 65 (expr -> MINUS expr .)
    TO              reduce using rule 65 (expr -> MINUS expr .)
    THEN            reduce using rule 65 (expr -> MINUS expr .)
    STEP            reduce using rule 65 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 85 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! POWER           [ shift and go to state 84 ]


state 90

    (86) pitem -> STRING expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    COMMA           reduce using rule 86 (pitem -> STRING expr .)
    SEMI            reduce using rule 86 (pitem -> STRING expr .)
    NEWLINE         reduce using rule 86 (pitem -> STRING expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 91

    (25) optend -> SEMI .

    NEWLINE         reduce using rule 25 (optend -> SEMI .)


state 92

    (83) plist -> plist COMMA . pitem
    (24) optend -> COMMA .
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    NEWLINE         reduce using rule 24 (optend -> COMMA .)
    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 121
    expr                           shift and go to state 52
    variable                       shift and go to state 47

state 93

    (17) command -> PRINT plist optend .

    NEWLINE         reduce using rule 17 (command -> PRINT plist optend .)


state 94

    (44) command -> DEF ID LPAREN . ID RPAREN EQUALS expr
    (45) command -> DEF ID LPAREN . ID RPAREN EQUALS error
    (46) command -> DEF ID LPAREN . error RPAREN EQUALS expr

    ID              shift and go to state 123
    error           shift and go to state 122


state 95

    (81) number -> MINUS INTEGER .

    COMMA           reduce using rule 81 (number -> MINUS INTEGER .)
    NEWLINE         reduce using rule 81 (number -> MINUS INTEGER .)


state 96

    (82) number -> MINUS FLOAT .

    COMMA           reduce using rule 82 (number -> MINUS FLOAT .)
    NEWLINE         reduce using rule 82 (number -> MINUS FLOAT .)


state 97

    (77) numlist -> numlist COMMA . number
    (79) number -> . INTEGER
    (80) number -> . FLOAT
    (81) number -> . MINUS INTEGER
    (82) number -> . MINUS FLOAT

    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 56
    MINUS           shift and go to state 60

    number                         shift and go to state 124

state 98

    (83) plist -> plist COMMA . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 121
    expr                           shift and go to state 52
    variable                       shift and go to state 47

state 99

    (18) command -> OUT expr EQUALS . plist
    (83) plist -> . plist COMMA pitem
    (84) plist -> . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    pitem                          shift and go to state 50
    expr                           shift and go to state 52
    variable                       shift and go to state 47
    plist                          shift and go to state 125

state 100

    (33) command -> FOR ID EQUALS . expr TO expr optstep
    (34) command -> FOR ID EQUALS . error TO expr optstep
    (35) command -> FOR ID EQUALS . expr TO error optstep
    (36) command -> FOR ID EQUALS . expr TO expr STEP error
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 127
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 126

state 101

    (30) command -> IF relexpr THEN . INTEGER
    (32) command -> IF relexpr THEN . error

    INTEGER         shift and go to state 128
    error           shift and go to state 129


state 102

    (67) relexpr -> expr LE . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 130

state 103

    (69) relexpr -> expr GE . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 131

state 104

    (70) relexpr -> expr EQUALS . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 132

state 105

    (71) relexpr -> expr NE . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 133

state 106

    (66) relexpr -> expr LT . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 134

state 107

    (68) relexpr -> expr GT . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 135

state 108

    (31) command -> IF error THEN . INTEGER

    INTEGER         shift and go to state 136


state 109

    (11) command -> LET variable EQUALS . expr
    (12) command -> LET variable EQUALS . error
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 138
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 137

state 110

    (20) command -> LETSTR variable EQUALS . plist
    (83) plist -> . plist COMMA pitem
    (84) plist -> . pitem
    (85) pitem -> . STRING
    (86) pitem -> . STRING expr
    (87) pitem -> . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 51
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    pitem                          shift and go to state 50
    plist                          shift and go to state 139
    expr                           shift and go to state 52

state 111

    (52) dimlist -> dimlist COMMA dimitem .

    COMMA           reduce using rule 52 (dimlist -> dimlist COMMA dimitem .)
    NEWLINE         reduce using rule 52 (dimlist -> dimlist COMMA dimitem .)


state 112

    (54) dimitem -> ID LPAREN INTEGER . RPAREN
    (55) dimitem -> ID LPAREN INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 141
    COMMA           shift and go to state 140


state 113

    (75) varlist -> varlist COMMA variable .

    COMMA           reduce using rule 75 (varlist -> varlist COMMA variable .)
    NEWLINE         reduce using rule 75 (varlist -> varlist COMMA variable .)


state 114

    (73) variable -> ID LPAREN expr . RPAREN
    (74) variable -> ID LPAREN expr . COMMA expr RPAREN
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    RPAREN          shift and go to state 142
    COMMA           shift and go to state 143
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 115

    (59) expr -> expr DIVIDE expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 59 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 59 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 59 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 59 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 59 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 59 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 59 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 59 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 59 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 59 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 59 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 59 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 59 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 59 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 59 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 59 (expr -> expr DIVIDE expr .)
    STEP            reduce using rule 59 (expr -> expr DIVIDE expr .)
    POWER           shift and go to state 84

  ! POWER           [ reduce using rule 59 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 85 ]
  ! DIVIDE          [ shift and go to state 83 ]


state 116

    (60) expr -> expr POWER expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 60 (expr -> expr POWER expr .)
    MINUS           reduce using rule 60 (expr -> expr POWER expr .)
    TIMES           reduce using rule 60 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 60 (expr -> expr POWER expr .)
    POWER           reduce using rule 60 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 60 (expr -> expr POWER expr .)
    COMMA           reduce using rule 60 (expr -> expr POWER expr .)
    SEMI            reduce using rule 60 (expr -> expr POWER expr .)
    EQUALS          reduce using rule 60 (expr -> expr POWER expr .)
    LT              reduce using rule 60 (expr -> expr POWER expr .)
    LE              reduce using rule 60 (expr -> expr POWER expr .)
    GT              reduce using rule 60 (expr -> expr POWER expr .)
    GE              reduce using rule 60 (expr -> expr POWER expr .)
    NE              reduce using rule 60 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 60 (expr -> expr POWER expr .)
    TO              reduce using rule 60 (expr -> expr POWER expr .)
    THEN            reduce using rule 60 (expr -> expr POWER expr .)
    STEP            reduce using rule 60 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 85 ]
  ! DIVIDE          [ shift and go to state 83 ]
  ! POWER           [ shift and go to state 84 ]


state 117

    (58) expr -> expr TIMES expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 58 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 58 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 58 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 58 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 58 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 58 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 58 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 58 (expr -> expr TIMES expr .)
    LT              reduce using rule 58 (expr -> expr TIMES expr .)
    LE              reduce using rule 58 (expr -> expr TIMES expr .)
    GT              reduce using rule 58 (expr -> expr TIMES expr .)
    GE              reduce using rule 58 (expr -> expr TIMES expr .)
    NE              reduce using rule 58 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 58 (expr -> expr TIMES expr .)
    TO              reduce using rule 58 (expr -> expr TIMES expr .)
    THEN            reduce using rule 58 (expr -> expr TIMES expr .)
    STEP            reduce using rule 58 (expr -> expr TIMES expr .)
    POWER           shift and go to state 84

  ! POWER           [ reduce using rule 58 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 85 ]
  ! DIVIDE          [ shift and go to state 83 ]


state 118

    (56) expr -> expr PLUS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 56 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 56 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 56 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 56 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 56 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 56 (expr -> expr PLUS expr .)
    LT              reduce using rule 56 (expr -> expr PLUS expr .)
    LE              reduce using rule 56 (expr -> expr PLUS expr .)
    GT              reduce using rule 56 (expr -> expr PLUS expr .)
    GE              reduce using rule 56 (expr -> expr PLUS expr .)
    NE              reduce using rule 56 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 56 (expr -> expr PLUS expr .)
    TO              reduce using rule 56 (expr -> expr PLUS expr .)
    THEN            reduce using rule 56 (expr -> expr PLUS expr .)
    STEP            reduce using rule 56 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84

  ! TIMES           [ reduce using rule 56 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 56 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]


state 119

    (57) expr -> expr MINUS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    PLUS            reduce using rule 57 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 57 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 57 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 57 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 57 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 57 (expr -> expr MINUS expr .)
    LT              reduce using rule 57 (expr -> expr MINUS expr .)
    LE              reduce using rule 57 (expr -> expr MINUS expr .)
    GT              reduce using rule 57 (expr -> expr MINUS expr .)
    GE              reduce using rule 57 (expr -> expr MINUS expr .)
    NE              reduce using rule 57 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 57 (expr -> expr MINUS expr .)
    TO              reduce using rule 57 (expr -> expr MINUS expr .)
    THEN            reduce using rule 57 (expr -> expr MINUS expr .)
    STEP            reduce using rule 57 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84

  ! TIMES           [ reduce using rule 57 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 57 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]


state 120

    (64) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 64 (expr -> LPAREN expr RPAREN .)
    STEP            reduce using rule 64 (expr -> LPAREN expr RPAREN .)


state 121

    (83) plist -> plist COMMA pitem .

    COMMA           reduce using rule 83 (plist -> plist COMMA pitem .)
    NEWLINE         reduce using rule 83 (plist -> plist COMMA pitem .)
    SEMI            reduce using rule 83 (plist -> plist COMMA pitem .)


state 122

    (46) command -> DEF ID LPAREN error . RPAREN EQUALS expr

    RPAREN          shift and go to state 144


state 123

    (44) command -> DEF ID LPAREN ID . RPAREN EQUALS expr
    (45) command -> DEF ID LPAREN ID . RPAREN EQUALS error

    RPAREN          shift and go to state 145


state 124

    (77) numlist -> numlist COMMA number .

    COMMA           reduce using rule 77 (numlist -> numlist COMMA number .)
    NEWLINE         reduce using rule 77 (numlist -> numlist COMMA number .)


state 125

    (18) command -> OUT expr EQUALS plist .
    (83) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 18 (command -> OUT expr EQUALS plist .)
    COMMA           shift and go to state 98


state 126

    (33) command -> FOR ID EQUALS expr . TO expr optstep
    (35) command -> FOR ID EQUALS expr . TO error optstep
    (36) command -> FOR ID EQUALS expr . TO expr STEP error
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    TO              shift and go to state 146
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 127

    (34) command -> FOR ID EQUALS error . TO expr optstep

    TO              shift and go to state 147


state 128

    (30) command -> IF relexpr THEN INTEGER .

    NEWLINE         reduce using rule 30 (command -> IF relexpr THEN INTEGER .)


state 129

    (32) command -> IF relexpr THEN error .

    NEWLINE         reduce using rule 32 (command -> IF relexpr THEN error .)


state 130

    (67) relexpr -> expr LE expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 67 (relexpr -> expr LE expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 131

    (69) relexpr -> expr GE expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 69 (relexpr -> expr GE expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 132

    (70) relexpr -> expr EQUALS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 70 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 133

    (71) relexpr -> expr NE expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 71 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 134

    (66) relexpr -> expr LT expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 66 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 135

    (68) relexpr -> expr GT expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    THEN            reduce using rule 68 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 136

    (31) command -> IF error THEN INTEGER .

    NEWLINE         reduce using rule 31 (command -> IF error THEN INTEGER .)


state 137

    (11) command -> LET variable EQUALS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    NEWLINE         reduce using rule 11 (command -> LET variable EQUALS expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 138

    (12) command -> LET variable EQUALS error .

    NEWLINE         reduce using rule 12 (command -> LET variable EQUALS error .)


state 139

    (20) command -> LETSTR variable EQUALS plist .
    (83) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 20 (command -> LETSTR variable EQUALS plist .)
    COMMA           shift and go to state 98


state 140

    (55) dimitem -> ID LPAREN INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 148


state 141

    (54) dimitem -> ID LPAREN INTEGER RPAREN .

    COMMA           reduce using rule 54 (dimitem -> ID LPAREN INTEGER RPAREN .)
    NEWLINE         reduce using rule 54 (dimitem -> ID LPAREN INTEGER RPAREN .)


state 142

    (73) variable -> ID LPAREN expr RPAREN .

    STEP            reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    PLUS            reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    MINUS           reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    TIMES           reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    POWER           reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    COMMA           reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    THEN            reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    EQUALS          reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    LT              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    LE              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    GT              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    GE              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    NE              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    SEMI            reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    RPAREN          reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)
    TO              reduce using rule 73 (variable -> ID LPAREN expr RPAREN .)


state 143

    (74) variable -> ID LPAREN expr COMMA . expr RPAREN
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 149

state 144

    (46) command -> DEF ID LPAREN error RPAREN . EQUALS expr

    EQUALS          shift and go to state 150


state 145

    (44) command -> DEF ID LPAREN ID RPAREN . EQUALS expr
    (45) command -> DEF ID LPAREN ID RPAREN . EQUALS error

    EQUALS          shift and go to state 151


state 146

    (33) command -> FOR ID EQUALS expr TO . expr optstep
    (35) command -> FOR ID EQUALS expr TO . error optstep
    (36) command -> FOR ID EQUALS expr TO . expr STEP error
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 153
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 152

state 147

    (34) command -> FOR ID EQUALS error TO . expr optstep
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 154

state 148

    (55) dimitem -> ID LPAREN INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 155


state 149

    (74) variable -> ID LPAREN expr COMMA expr . RPAREN
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    RPAREN          shift and go to state 156
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 150

    (46) command -> DEF ID LPAREN error RPAREN EQUALS . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 157

state 151

    (44) command -> DEF ID LPAREN ID RPAREN EQUALS . expr
    (45) command -> DEF ID LPAREN ID RPAREN EQUALS . error
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 159
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 158

state 152

    (33) command -> FOR ID EQUALS expr TO expr . optstep
    (36) command -> FOR ID EQUALS expr TO expr . STEP error
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr
    (37) optstep -> . STEP expr
    (38) optstep -> . empty
    (88) empty -> .

    STEP            shift and go to state 160
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84
    NEWLINE         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 162
    optstep                        shift and go to state 161

state 153

    (35) command -> FOR ID EQUALS expr TO error . optstep
    (37) optstep -> . STEP expr
    (38) optstep -> . empty
    (88) empty -> .

    STEP            shift and go to state 163
    NEWLINE         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 162
    optstep                        shift and go to state 164

state 154

    (34) command -> FOR ID EQUALS error TO expr . optstep
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr
    (37) optstep -> . STEP expr
    (38) optstep -> . empty
    (88) empty -> .

    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84
    STEP            shift and go to state 163
    NEWLINE         reduce using rule 88 (empty -> .)

    empty                          shift and go to state 162
    optstep                        shift and go to state 165

state 155

    (55) dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .

    COMMA           reduce using rule 55 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)
    NEWLINE         reduce using rule 55 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)


state 156

    (74) variable -> ID LPAREN expr COMMA expr RPAREN .

    STEP            reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    POWER           reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NEWLINE         reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    THEN            reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    EQUALS          reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LT              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LE              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GT              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GE              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NE              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    SEMI            reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TO              reduce using rule 74 (variable -> ID LPAREN expr COMMA expr RPAREN .)


state 157

    (46) command -> DEF ID LPAREN error RPAREN EQUALS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    NEWLINE         reduce using rule 46 (command -> DEF ID LPAREN error RPAREN EQUALS expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 158

    (44) command -> DEF ID LPAREN ID RPAREN EQUALS expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    NEWLINE         reduce using rule 44 (command -> DEF ID LPAREN ID RPAREN EQUALS expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 159

    (45) command -> DEF ID LPAREN ID RPAREN EQUALS error .

    NEWLINE         reduce using rule 45 (command -> DEF ID LPAREN ID RPAREN EQUALS error .)


state 160

    (36) command -> FOR ID EQUALS expr TO expr STEP . error
    (37) optstep -> STEP . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 167
    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 166

state 161

    (33) command -> FOR ID EQUALS expr TO expr optstep .

    NEWLINE         reduce using rule 33 (command -> FOR ID EQUALS expr TO expr optstep .)


state 162

    (38) optstep -> empty .

    NEWLINE         reduce using rule 38 (optstep -> empty .)


state 163

    (37) optstep -> STEP . expr
    (56) expr -> . expr PLUS expr
    (57) expr -> . expr MINUS expr
    (58) expr -> . expr TIMES expr
    (59) expr -> . expr DIVIDE expr
    (60) expr -> . expr POWER expr
    (61) expr -> . INTEGER
    (62) expr -> . FLOAT
    (63) expr -> . variable
    (64) expr -> . LPAREN expr RPAREN
    (65) expr -> . MINUS expr
    (72) variable -> . ID
    (73) variable -> . ID LPAREN expr RPAREN
    (74) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 48
    FLOAT           shift and go to state 45
    LPAREN          shift and go to state 46
    MINUS           shift and go to state 49
    ID              shift and go to state 43

    variable                       shift and go to state 47
    expr                           shift and go to state 166

state 164

    (35) command -> FOR ID EQUALS expr TO error optstep .

    NEWLINE         reduce using rule 35 (command -> FOR ID EQUALS expr TO error optstep .)


state 165

    (34) command -> FOR ID EQUALS error TO expr optstep .

    NEWLINE         reduce using rule 34 (command -> FOR ID EQUALS error TO expr optstep .)


state 166

    (37) optstep -> STEP expr .
    (56) expr -> expr . PLUS expr
    (57) expr -> expr . MINUS expr
    (58) expr -> expr . TIMES expr
    (59) expr -> expr . DIVIDE expr
    (60) expr -> expr . POWER expr

    NEWLINE         reduce using rule 37 (optstep -> STEP expr .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 83
    POWER           shift and go to state 84


state 167

    (36) command -> FOR ID EQUALS expr TO expr STEP error .

    NEWLINE         reduce using rule 36 (command -> FOR ID EQUALS expr TO expr STEP error .)

