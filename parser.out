Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program statement
Rule 2     program -> statement
Rule 3     program -> error
Rule 4     statement -> INTEGER command NEWLINE
Rule 5     statement -> RUN NEWLINE
Rule 6     statement -> LIST NEWLINE
Rule 7     statement -> NEW NEWLINE
Rule 8     statement -> INTEGER NEWLINE
Rule 9     statement -> INTEGER error NEWLINE
Rule 10    statement -> NEWLINE
Rule 11    command -> LET variable EQUALS expr
Rule 12    command -> LET variable EQUALS error
Rule 13    command -> READ varlist
Rule 14    command -> READ error
Rule 15    command -> DATA numlist
Rule 16    command -> DATA error
Rule 17    command -> PRINT plist optend
Rule 18    command -> OUT expr EQUALS plist
Rule 19    command -> DELAY expr
Rule 20    command -> LETSTR variable EQUALS plist
Rule 21    command -> READDATA variable EQUALS plist
Rule 22    command -> CHECK plist
Rule 23    command -> CLEAR plist
Rule 24    command -> PRINT error
Rule 25    optend -> COMMA
Rule 26    optend -> SEMI
Rule 27    optend -> <empty>
Rule 28    command -> PRINT
Rule 29    command -> GOTO INTEGER
Rule 30    command -> GOTO error
Rule 31    command -> IF relexpr THEN INTEGER
Rule 32    command -> IF error THEN INTEGER
Rule 33    command -> IF relexpr THEN error
Rule 34    command -> FOR ID EQUALS expr TO expr optstep
Rule 35    command -> FOR ID EQUALS error TO expr optstep
Rule 36    command -> FOR ID EQUALS expr TO error optstep
Rule 37    command -> FOR ID EQUALS expr TO expr STEP error
Rule 38    optstep -> STEP expr
Rule 39    optstep -> empty
Rule 40    command -> NEXT ID
Rule 41    command -> NEXT error
Rule 42    command -> END
Rule 43    command -> REM
Rule 44    command -> STOP
Rule 45    command -> DEF ID LPAREN ID RPAREN EQUALS expr
Rule 46    command -> DEF ID LPAREN ID RPAREN EQUALS error
Rule 47    command -> DEF ID LPAREN error RPAREN EQUALS expr
Rule 48    command -> GOSUB INTEGER
Rule 49    command -> GOSUB error
Rule 50    command -> RETURN
Rule 51    command -> DIM dimlist
Rule 52    command -> DIM error
Rule 53    dimlist -> dimlist COMMA dimitem
Rule 54    dimlist -> dimitem
Rule 55    dimitem -> ID LPAREN INTEGER RPAREN
Rule 56    dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN
Rule 57    expr -> expr PLUS expr
Rule 58    expr -> expr MINUS expr
Rule 59    expr -> expr TIMES expr
Rule 60    expr -> expr DIVIDE expr
Rule 61    expr -> expr POWER expr
Rule 62    expr -> INTEGER
Rule 63    expr -> FLOAT
Rule 64    expr -> variable
Rule 65    expr -> LPAREN expr RPAREN
Rule 66    expr -> MINUS expr
Rule 67    relexpr -> expr LT expr
Rule 68    relexpr -> expr LE expr
Rule 69    relexpr -> expr GT expr
Rule 70    relexpr -> expr GE expr
Rule 71    relexpr -> expr EQUALS expr
Rule 72    relexpr -> expr NE expr
Rule 73    variable -> ID
Rule 74    variable -> ID LPAREN expr RPAREN
Rule 75    variable -> ID LPAREN expr COMMA expr RPAREN
Rule 76    varlist -> varlist COMMA variable
Rule 77    varlist -> variable
Rule 78    numlist -> numlist COMMA number
Rule 79    numlist -> number
Rule 80    number -> INTEGER
Rule 81    number -> FLOAT
Rule 82    number -> MINUS INTEGER
Rule 83    number -> MINUS FLOAT
Rule 84    plist -> plist COMMA pitem
Rule 85    plist -> pitem
Rule 86    pitem -> STRING
Rule 87    pitem -> STRING expr
Rule 88    pitem -> expr
Rule 89    empty -> <empty>

Terminals, with rules where they appear

CHECK                : 22
CLEAR                : 23
COMMA                : 25 53 56 75 76 78 84
DATA                 : 15 16
DEF                  : 45 46 47
DELAY                : 19
DIM                  : 51 52
DIVIDE               : 60
END                  : 42
EQUALS               : 11 12 18 20 21 34 35 36 37 45 46 47 71
FLOAT                : 63 81 83
FOR                  : 34 35 36 37
GE                   : 70
GOSUB                : 48 49
GOTO                 : 29 30
GT                   : 69
ID                   : 34 35 36 37 40 45 45 46 46 47 55 56 73 74 75
IF                   : 31 32 33
INTEGER              : 4 8 9 29 31 32 48 55 56 56 62 80 82
LE                   : 68
LET                  : 11 12
LETSTR               : 20
LIST                 : 6
LPAREN               : 45 46 47 55 56 65 74 75
LT                   : 67
MINUS                : 58 66 82 83
NE                   : 72
NEW                  : 7
NEWLINE              : 4 5 6 7 8 9 10
NEXT                 : 40 41
OUT                  : 18
PLUS                 : 57
POWER                : 61
PRINT                : 17 24 28
READ                 : 13 14
READDATA             : 21
REM                  : 43
RETURN               : 50
RPAREN               : 45 46 47 55 56 65 74 75
RUN                  : 5
SEMI                 : 26
STEP                 : 37 38
STOP                 : 44
STRING               : 86 87
THEN                 : 31 32 33
TIMES                : 59
TO                   : 34 35 36 37
error                : 3 9 12 14 16 24 30 32 33 35 36 37 41 46 47 49 52

Nonterminals, with rules where they appear

command              : 4
dimitem              : 53 54
dimlist              : 51 53
empty                : 39
expr                 : 11 18 19 34 34 35 36 37 37 38 45 47 57 57 58 58 59 59 60 60 61 61 65 66 67 67 68 68 69 69 70 70 71 71 72 72 74 75 75 87 88
number               : 78 79
numlist              : 15 78
optend               : 17
optstep              : 34 35 36
pitem                : 84 85
plist                : 17 18 20 21 22 23 84
program              : 1 0
relexpr              : 31 33
statement            : 1 2
variable             : 11 12 20 21 64 76 77
varlist              : 13 76

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program statement
    (2) program -> . statement
    (3) program -> . error
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    error           shift and go to state 7
    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    program                        shift and go to state 5
    statement                      shift and go to state 6

state 1

    (7) statement -> NEW . NEWLINE

    NEWLINE         shift and go to state 9


state 2

    (5) statement -> RUN . NEWLINE

    NEWLINE         shift and go to state 10


state 3

    (10) statement -> NEWLINE .

    INTEGER         reduce using rule 10 (statement -> NEWLINE .)
    RUN             reduce using rule 10 (statement -> NEWLINE .)
    LIST            reduce using rule 10 (statement -> NEWLINE .)
    NEW             reduce using rule 10 (statement -> NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> NEWLINE .)
    $end            reduce using rule 10 (statement -> NEWLINE .)


state 4

    (6) statement -> LIST . NEWLINE

    NEWLINE         shift and go to state 11


state 5

    (0) S' -> program .
    (1) program -> program . statement
    (4) statement -> . INTEGER command NEWLINE
    (5) statement -> . RUN NEWLINE
    (6) statement -> . LIST NEWLINE
    (7) statement -> . NEW NEWLINE
    (8) statement -> . INTEGER NEWLINE
    (9) statement -> . INTEGER error NEWLINE
    (10) statement -> . NEWLINE

    INTEGER         shift and go to state 8
    RUN             shift and go to state 2
    LIST            shift and go to state 4
    NEW             shift and go to state 1
    NEWLINE         shift and go to state 3

    statement                      shift and go to state 12

state 6

    (2) program -> statement .

    INTEGER         reduce using rule 2 (program -> statement .)
    RUN             reduce using rule 2 (program -> statement .)
    LIST            reduce using rule 2 (program -> statement .)
    NEW             reduce using rule 2 (program -> statement .)
    NEWLINE         reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)


state 7

    (3) program -> error .

    INTEGER         reduce using rule 3 (program -> error .)
    RUN             reduce using rule 3 (program -> error .)
    LIST            reduce using rule 3 (program -> error .)
    NEW             reduce using rule 3 (program -> error .)
    NEWLINE         reduce using rule 3 (program -> error .)
    $end            reduce using rule 3 (program -> error .)


state 8

    (4) statement -> INTEGER . command NEWLINE
    (8) statement -> INTEGER . NEWLINE
    (9) statement -> INTEGER . error NEWLINE
    (11) command -> . LET variable EQUALS expr
    (12) command -> . LET variable EQUALS error
    (13) command -> . READ varlist
    (14) command -> . READ error
    (15) command -> . DATA numlist
    (16) command -> . DATA error
    (17) command -> . PRINT plist optend
    (18) command -> . OUT expr EQUALS plist
    (19) command -> . DELAY expr
    (20) command -> . LETSTR variable EQUALS plist
    (21) command -> . READDATA variable EQUALS plist
    (22) command -> . CHECK plist
    (23) command -> . CLEAR plist
    (24) command -> . PRINT error
    (28) command -> . PRINT
    (29) command -> . GOTO INTEGER
    (30) command -> . GOTO error
    (31) command -> . IF relexpr THEN INTEGER
    (32) command -> . IF error THEN INTEGER
    (33) command -> . IF relexpr THEN error
    (34) command -> . FOR ID EQUALS expr TO expr optstep
    (35) command -> . FOR ID EQUALS error TO expr optstep
    (36) command -> . FOR ID EQUALS expr TO error optstep
    (37) command -> . FOR ID EQUALS expr TO expr STEP error
    (40) command -> . NEXT ID
    (41) command -> . NEXT error
    (42) command -> . END
    (43) command -> . REM
    (44) command -> . STOP
    (45) command -> . DEF ID LPAREN ID RPAREN EQUALS expr
    (46) command -> . DEF ID LPAREN ID RPAREN EQUALS error
    (47) command -> . DEF ID LPAREN error RPAREN EQUALS expr
    (48) command -> . GOSUB INTEGER
    (49) command -> . GOSUB error
    (50) command -> . RETURN
    (51) command -> . DIM dimlist
    (52) command -> . DIM error

    NEWLINE         shift and go to state 22
    error           shift and go to state 36
    LET             shift and go to state 34
    READ            shift and go to state 15
    DATA            shift and go to state 21
    PRINT           shift and go to state 19
    OUT             shift and go to state 27
    DELAY           shift and go to state 17
    LETSTR          shift and go to state 35
    READDATA        shift and go to state 23
    CHECK           shift and go to state 26
    CLEAR           shift and go to state 32
    GOTO            shift and go to state 30
    IF              shift and go to state 33
    FOR             shift and go to state 31
    NEXT            shift and go to state 24
    END             shift and go to state 29
    REM             shift and go to state 18
    STOP            shift and go to state 16
    DEF             shift and go to state 20
    GOSUB           shift and go to state 28
    RETURN          shift and go to state 13
    DIM             shift and go to state 14

    command                        shift and go to state 25

state 9

    (7) statement -> NEW NEWLINE .

    INTEGER         reduce using rule 7 (statement -> NEW NEWLINE .)
    RUN             reduce using rule 7 (statement -> NEW NEWLINE .)
    LIST            reduce using rule 7 (statement -> NEW NEWLINE .)
    NEW             reduce using rule 7 (statement -> NEW NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> NEW NEWLINE .)
    $end            reduce using rule 7 (statement -> NEW NEWLINE .)


state 10

    (5) statement -> RUN NEWLINE .

    INTEGER         reduce using rule 5 (statement -> RUN NEWLINE .)
    RUN             reduce using rule 5 (statement -> RUN NEWLINE .)
    LIST            reduce using rule 5 (statement -> RUN NEWLINE .)
    NEW             reduce using rule 5 (statement -> RUN NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> RUN NEWLINE .)
    $end            reduce using rule 5 (statement -> RUN NEWLINE .)


state 11

    (6) statement -> LIST NEWLINE .

    INTEGER         reduce using rule 6 (statement -> LIST NEWLINE .)
    RUN             reduce using rule 6 (statement -> LIST NEWLINE .)
    LIST            reduce using rule 6 (statement -> LIST NEWLINE .)
    NEW             reduce using rule 6 (statement -> LIST NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> LIST NEWLINE .)
    $end            reduce using rule 6 (statement -> LIST NEWLINE .)


state 12

    (1) program -> program statement .

    INTEGER         reduce using rule 1 (program -> program statement .)
    RUN             reduce using rule 1 (program -> program statement .)
    LIST            reduce using rule 1 (program -> program statement .)
    NEW             reduce using rule 1 (program -> program statement .)
    NEWLINE         reduce using rule 1 (program -> program statement .)
    $end            reduce using rule 1 (program -> program statement .)


state 13

    (50) command -> RETURN .

    NEWLINE         reduce using rule 50 (command -> RETURN .)


state 14

    (51) command -> DIM . dimlist
    (52) command -> DIM . error
    (53) dimlist -> . dimlist COMMA dimitem
    (54) dimlist -> . dimitem
    (55) dimitem -> . ID LPAREN INTEGER RPAREN
    (56) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    error           shift and go to state 39
    ID              shift and go to state 40

    dimitem                        shift and go to state 37
    dimlist                        shift and go to state 38

state 15

    (13) command -> READ . varlist
    (14) command -> READ . error
    (76) varlist -> . varlist COMMA variable
    (77) varlist -> . variable
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 42
    ID              shift and go to state 44

    varlist                        shift and go to state 41
    variable                       shift and go to state 43

state 16

    (44) command -> STOP .

    NEWLINE         reduce using rule 44 (command -> STOP .)


state 17

    (19) command -> DELAY . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 45

state 18

    (43) command -> REM .

    NEWLINE         reduce using rule 43 (command -> REM .)


state 19

    (17) command -> PRINT . plist optend
    (24) command -> PRINT . error
    (28) command -> PRINT .
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 54
    NEWLINE         reduce using rule 28 (command -> PRINT .)
    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 51
    expr                           shift and go to state 53
    plist                          shift and go to state 55
    variable                       shift and go to state 48

state 20

    (45) command -> DEF . ID LPAREN ID RPAREN EQUALS expr
    (46) command -> DEF . ID LPAREN ID RPAREN EQUALS error
    (47) command -> DEF . ID LPAREN error RPAREN EQUALS expr

    ID              shift and go to state 56


state 21

    (15) command -> DATA . numlist
    (16) command -> DATA . error
    (78) numlist -> . numlist COMMA number
    (79) numlist -> . number
    (80) number -> . INTEGER
    (81) number -> . FLOAT
    (82) number -> . MINUS INTEGER
    (83) number -> . MINUS FLOAT

    error           shift and go to state 59
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 57
    MINUS           shift and go to state 61

    number                         shift and go to state 58
    numlist                        shift and go to state 62

state 22

    (8) statement -> INTEGER NEWLINE .

    INTEGER         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    RUN             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    LIST            reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEW             reduce using rule 8 (statement -> INTEGER NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> INTEGER NEWLINE .)
    $end            reduce using rule 8 (statement -> INTEGER NEWLINE .)


state 23

    (21) command -> READDATA . variable EQUALS plist
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 44

    variable                       shift and go to state 63

state 24

    (40) command -> NEXT . ID
    (41) command -> NEXT . error

    ID              shift and go to state 65
    error           shift and go to state 64


state 25

    (4) statement -> INTEGER command . NEWLINE

    NEWLINE         shift and go to state 66


state 26

    (22) command -> CHECK . plist
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 51
    expr                           shift and go to state 53
    variable                       shift and go to state 48
    plist                          shift and go to state 67

state 27

    (18) command -> OUT . expr EQUALS plist
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 68

state 28

    (48) command -> GOSUB . INTEGER
    (49) command -> GOSUB . error

    INTEGER         shift and go to state 70
    error           shift and go to state 69


state 29

    (42) command -> END .

    NEWLINE         reduce using rule 42 (command -> END .)


state 30

    (29) command -> GOTO . INTEGER
    (30) command -> GOTO . error

    INTEGER         shift and go to state 71
    error           shift and go to state 72


state 31

    (34) command -> FOR . ID EQUALS expr TO expr optstep
    (35) command -> FOR . ID EQUALS error TO expr optstep
    (36) command -> FOR . ID EQUALS expr TO error optstep
    (37) command -> FOR . ID EQUALS expr TO expr STEP error

    ID              shift and go to state 73


state 32

    (23) command -> CLEAR . plist
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 51
    expr                           shift and go to state 53
    variable                       shift and go to state 48
    plist                          shift and go to state 74

state 33

    (31) command -> IF . relexpr THEN INTEGER
    (32) command -> IF . error THEN INTEGER
    (33) command -> IF . relexpr THEN error
    (67) relexpr -> . expr LT expr
    (68) relexpr -> . expr LE expr
    (69) relexpr -> . expr GT expr
    (70) relexpr -> . expr GE expr
    (71) relexpr -> . expr EQUALS expr
    (72) relexpr -> . expr NE expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 77
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 76
    relexpr                        shift and go to state 75

state 34

    (11) command -> LET . variable EQUALS expr
    (12) command -> LET . variable EQUALS error
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 44

    variable                       shift and go to state 78

state 35

    (20) command -> LETSTR . variable EQUALS plist
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 44

    variable                       shift and go to state 79

state 36

    (9) statement -> INTEGER error . NEWLINE

    NEWLINE         shift and go to state 80


state 37

    (54) dimlist -> dimitem .

    COMMA           reduce using rule 54 (dimlist -> dimitem .)
    NEWLINE         reduce using rule 54 (dimlist -> dimitem .)


state 38

    (51) command -> DIM dimlist .
    (53) dimlist -> dimlist . COMMA dimitem

    NEWLINE         reduce using rule 51 (command -> DIM dimlist .)
    COMMA           shift and go to state 81


state 39

    (52) command -> DIM error .

    NEWLINE         reduce using rule 52 (command -> DIM error .)


state 40

    (55) dimitem -> ID . LPAREN INTEGER RPAREN
    (56) dimitem -> ID . LPAREN INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 82


state 41

    (13) command -> READ varlist .
    (76) varlist -> varlist . COMMA variable

    NEWLINE         reduce using rule 13 (command -> READ varlist .)
    COMMA           shift and go to state 83


state 42

    (14) command -> READ error .

    NEWLINE         reduce using rule 14 (command -> READ error .)


state 43

    (77) varlist -> variable .

    COMMA           reduce using rule 77 (varlist -> variable .)
    NEWLINE         reduce using rule 77 (varlist -> variable .)


state 44

    (73) variable -> ID .
    (74) variable -> ID . LPAREN expr RPAREN
    (75) variable -> ID . LPAREN expr COMMA expr RPAREN

    PLUS            reduce using rule 73 (variable -> ID .)
    MINUS           reduce using rule 73 (variable -> ID .)
    TIMES           reduce using rule 73 (variable -> ID .)
    DIVIDE          reduce using rule 73 (variable -> ID .)
    POWER           reduce using rule 73 (variable -> ID .)
    STEP            reduce using rule 73 (variable -> ID .)
    NEWLINE         reduce using rule 73 (variable -> ID .)
    COMMA           reduce using rule 73 (variable -> ID .)
    THEN            reduce using rule 73 (variable -> ID .)
    EQUALS          reduce using rule 73 (variable -> ID .)
    SEMI            reduce using rule 73 (variable -> ID .)
    LT              reduce using rule 73 (variable -> ID .)
    LE              reduce using rule 73 (variable -> ID .)
    GT              reduce using rule 73 (variable -> ID .)
    GE              reduce using rule 73 (variable -> ID .)
    NE              reduce using rule 73 (variable -> ID .)
    RPAREN          reduce using rule 73 (variable -> ID .)
    TO              reduce using rule 73 (variable -> ID .)
    LPAREN          shift and go to state 84


state 45

    (19) command -> DELAY expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    NEWLINE         reduce using rule 19 (command -> DELAY expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 46

    (63) expr -> FLOAT .

    PLUS            reduce using rule 63 (expr -> FLOAT .)
    MINUS           reduce using rule 63 (expr -> FLOAT .)
    TIMES           reduce using rule 63 (expr -> FLOAT .)
    DIVIDE          reduce using rule 63 (expr -> FLOAT .)
    POWER           reduce using rule 63 (expr -> FLOAT .)
    NEWLINE         reduce using rule 63 (expr -> FLOAT .)
    COMMA           reduce using rule 63 (expr -> FLOAT .)
    SEMI            reduce using rule 63 (expr -> FLOAT .)
    EQUALS          reduce using rule 63 (expr -> FLOAT .)
    LT              reduce using rule 63 (expr -> FLOAT .)
    LE              reduce using rule 63 (expr -> FLOAT .)
    GT              reduce using rule 63 (expr -> FLOAT .)
    GE              reduce using rule 63 (expr -> FLOAT .)
    NE              reduce using rule 63 (expr -> FLOAT .)
    RPAREN          reduce using rule 63 (expr -> FLOAT .)
    TO              reduce using rule 63 (expr -> FLOAT .)
    THEN            reduce using rule 63 (expr -> FLOAT .)
    STEP            reduce using rule 63 (expr -> FLOAT .)


state 47

    (65) expr -> LPAREN . expr RPAREN
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 90

state 48

    (64) expr -> variable .

    PLUS            reduce using rule 64 (expr -> variable .)
    MINUS           reduce using rule 64 (expr -> variable .)
    TIMES           reduce using rule 64 (expr -> variable .)
    DIVIDE          reduce using rule 64 (expr -> variable .)
    POWER           reduce using rule 64 (expr -> variable .)
    NEWLINE         reduce using rule 64 (expr -> variable .)
    COMMA           reduce using rule 64 (expr -> variable .)
    SEMI            reduce using rule 64 (expr -> variable .)
    EQUALS          reduce using rule 64 (expr -> variable .)
    LT              reduce using rule 64 (expr -> variable .)
    LE              reduce using rule 64 (expr -> variable .)
    GT              reduce using rule 64 (expr -> variable .)
    GE              reduce using rule 64 (expr -> variable .)
    NE              reduce using rule 64 (expr -> variable .)
    RPAREN          reduce using rule 64 (expr -> variable .)
    TO              reduce using rule 64 (expr -> variable .)
    THEN            reduce using rule 64 (expr -> variable .)
    STEP            reduce using rule 64 (expr -> variable .)


state 49

    (62) expr -> INTEGER .

    PLUS            reduce using rule 62 (expr -> INTEGER .)
    MINUS           reduce using rule 62 (expr -> INTEGER .)
    TIMES           reduce using rule 62 (expr -> INTEGER .)
    DIVIDE          reduce using rule 62 (expr -> INTEGER .)
    POWER           reduce using rule 62 (expr -> INTEGER .)
    NEWLINE         reduce using rule 62 (expr -> INTEGER .)
    COMMA           reduce using rule 62 (expr -> INTEGER .)
    SEMI            reduce using rule 62 (expr -> INTEGER .)
    EQUALS          reduce using rule 62 (expr -> INTEGER .)
    LT              reduce using rule 62 (expr -> INTEGER .)
    LE              reduce using rule 62 (expr -> INTEGER .)
    GT              reduce using rule 62 (expr -> INTEGER .)
    GE              reduce using rule 62 (expr -> INTEGER .)
    NE              reduce using rule 62 (expr -> INTEGER .)
    RPAREN          reduce using rule 62 (expr -> INTEGER .)
    TO              reduce using rule 62 (expr -> INTEGER .)
    THEN            reduce using rule 62 (expr -> INTEGER .)
    STEP            reduce using rule 62 (expr -> INTEGER .)


state 50

    (66) expr -> MINUS . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 91

state 51

    (85) plist -> pitem .

    COMMA           reduce using rule 85 (plist -> pitem .)
    NEWLINE         reduce using rule 85 (plist -> pitem .)
    SEMI            reduce using rule 85 (plist -> pitem .)


state 52

    (86) pitem -> STRING .
    (87) pitem -> STRING . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    COMMA           reduce using rule 86 (pitem -> STRING .)
    NEWLINE         reduce using rule 86 (pitem -> STRING .)
    SEMI            reduce using rule 86 (pitem -> STRING .)
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 92

state 53

    (88) pitem -> expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    COMMA           reduce using rule 88 (pitem -> expr .)
    NEWLINE         reduce using rule 88 (pitem -> expr .)
    SEMI            reduce using rule 88 (pitem -> expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 54

    (24) command -> PRINT error .

    NEWLINE         reduce using rule 24 (command -> PRINT error .)


state 55

    (17) command -> PRINT plist . optend
    (84) plist -> plist . COMMA pitem
    (25) optend -> . COMMA
    (26) optend -> . SEMI
    (27) optend -> .

    COMMA           shift and go to state 94
    SEMI            shift and go to state 93
    NEWLINE         reduce using rule 27 (optend -> .)

    optend                         shift and go to state 95

state 56

    (45) command -> DEF ID . LPAREN ID RPAREN EQUALS expr
    (46) command -> DEF ID . LPAREN ID RPAREN EQUALS error
    (47) command -> DEF ID . LPAREN error RPAREN EQUALS expr

    LPAREN          shift and go to state 96


state 57

    (81) number -> FLOAT .

    COMMA           reduce using rule 81 (number -> FLOAT .)
    NEWLINE         reduce using rule 81 (number -> FLOAT .)


state 58

    (79) numlist -> number .

    COMMA           reduce using rule 79 (numlist -> number .)
    NEWLINE         reduce using rule 79 (numlist -> number .)


state 59

    (16) command -> DATA error .

    NEWLINE         reduce using rule 16 (command -> DATA error .)


state 60

    (80) number -> INTEGER .

    COMMA           reduce using rule 80 (number -> INTEGER .)
    NEWLINE         reduce using rule 80 (number -> INTEGER .)


state 61

    (82) number -> MINUS . INTEGER
    (83) number -> MINUS . FLOAT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98


state 62

    (15) command -> DATA numlist .
    (78) numlist -> numlist . COMMA number

    NEWLINE         reduce using rule 15 (command -> DATA numlist .)
    COMMA           shift and go to state 99


state 63

    (21) command -> READDATA variable . EQUALS plist

    EQUALS          shift and go to state 100


state 64

    (41) command -> NEXT error .

    NEWLINE         reduce using rule 41 (command -> NEXT error .)


state 65

    (40) command -> NEXT ID .

    NEWLINE         reduce using rule 40 (command -> NEXT ID .)


state 66

    (4) statement -> INTEGER command NEWLINE .

    INTEGER         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    RUN             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    LIST            reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEW             reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> INTEGER command NEWLINE .)
    $end            reduce using rule 4 (statement -> INTEGER command NEWLINE .)


state 67

    (22) command -> CHECK plist .
    (84) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 22 (command -> CHECK plist .)
    COMMA           shift and go to state 101


state 68

    (18) command -> OUT expr . EQUALS plist
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    EQUALS          shift and go to state 102
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 69

    (49) command -> GOSUB error .

    NEWLINE         reduce using rule 49 (command -> GOSUB error .)


state 70

    (48) command -> GOSUB INTEGER .

    NEWLINE         reduce using rule 48 (command -> GOSUB INTEGER .)


state 71

    (29) command -> GOTO INTEGER .

    NEWLINE         reduce using rule 29 (command -> GOTO INTEGER .)


state 72

    (30) command -> GOTO error .

    NEWLINE         reduce using rule 30 (command -> GOTO error .)


state 73

    (34) command -> FOR ID . EQUALS expr TO expr optstep
    (35) command -> FOR ID . EQUALS error TO expr optstep
    (36) command -> FOR ID . EQUALS expr TO error optstep
    (37) command -> FOR ID . EQUALS expr TO expr STEP error

    EQUALS          shift and go to state 103


state 74

    (23) command -> CLEAR plist .
    (84) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 23 (command -> CLEAR plist .)
    COMMA           shift and go to state 101


state 75

    (31) command -> IF relexpr . THEN INTEGER
    (33) command -> IF relexpr . THEN error

    THEN            shift and go to state 104


state 76

    (67) relexpr -> expr . LT expr
    (68) relexpr -> expr . LE expr
    (69) relexpr -> expr . GT expr
    (70) relexpr -> expr . GE expr
    (71) relexpr -> expr . EQUALS expr
    (72) relexpr -> expr . NE expr
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    LT              shift and go to state 109
    LE              shift and go to state 105
    GT              shift and go to state 110
    GE              shift and go to state 106
    EQUALS          shift and go to state 107
    NE              shift and go to state 108
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 77

    (32) command -> IF error . THEN INTEGER

    THEN            shift and go to state 111


state 78

    (11) command -> LET variable . EQUALS expr
    (12) command -> LET variable . EQUALS error

    EQUALS          shift and go to state 112


state 79

    (20) command -> LETSTR variable . EQUALS plist

    EQUALS          shift and go to state 113


state 80

    (9) statement -> INTEGER error NEWLINE .

    INTEGER         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    RUN             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    LIST            reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEW             reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> INTEGER error NEWLINE .)
    $end            reduce using rule 9 (statement -> INTEGER error NEWLINE .)


state 81

    (53) dimlist -> dimlist COMMA . dimitem
    (55) dimitem -> . ID LPAREN INTEGER RPAREN
    (56) dimitem -> . ID LPAREN INTEGER COMMA INTEGER RPAREN

    ID              shift and go to state 40

    dimitem                        shift and go to state 114

state 82

    (55) dimitem -> ID LPAREN . INTEGER RPAREN
    (56) dimitem -> ID LPAREN . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 115


state 83

    (76) varlist -> varlist COMMA . variable
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    ID              shift and go to state 44

    variable                       shift and go to state 116

state 84

    (74) variable -> ID LPAREN . expr RPAREN
    (75) variable -> ID LPAREN . expr COMMA expr RPAREN
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 117

state 85

    (60) expr -> expr DIVIDE . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 118

state 86

    (61) expr -> expr POWER . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 119

state 87

    (59) expr -> expr TIMES . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 120

state 88

    (57) expr -> expr PLUS . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 121

state 89

    (58) expr -> expr MINUS . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 122

state 90

    (65) expr -> LPAREN expr . RPAREN
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    RPAREN          shift and go to state 123
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 91

    (66) expr -> MINUS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 66 (expr -> MINUS expr .)
    MINUS           reduce using rule 66 (expr -> MINUS expr .)
    TIMES           reduce using rule 66 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 66 (expr -> MINUS expr .)
    POWER           reduce using rule 66 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 66 (expr -> MINUS expr .)
    COMMA           reduce using rule 66 (expr -> MINUS expr .)
    SEMI            reduce using rule 66 (expr -> MINUS expr .)
    EQUALS          reduce using rule 66 (expr -> MINUS expr .)
    LT              reduce using rule 66 (expr -> MINUS expr .)
    LE              reduce using rule 66 (expr -> MINUS expr .)
    GT              reduce using rule 66 (expr -> MINUS expr .)
    GE              reduce using rule 66 (expr -> MINUS expr .)
    NE              reduce using rule 66 (expr -> MINUS expr .)
    RPAREN          reduce using rule 66 (expr -> MINUS expr .)
    TO              reduce using rule 66 (expr -> MINUS expr .)
    THEN            reduce using rule 66 (expr -> MINUS expr .)
    STEP            reduce using rule 66 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! POWER           [ shift and go to state 86 ]


state 92

    (87) pitem -> STRING expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    COMMA           reduce using rule 87 (pitem -> STRING expr .)
    NEWLINE         reduce using rule 87 (pitem -> STRING expr .)
    SEMI            reduce using rule 87 (pitem -> STRING expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 93

    (26) optend -> SEMI .

    NEWLINE         reduce using rule 26 (optend -> SEMI .)


state 94

    (84) plist -> plist COMMA . pitem
    (25) optend -> COMMA .
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    NEWLINE         reduce using rule 25 (optend -> COMMA .)
    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 124
    expr                           shift and go to state 53
    variable                       shift and go to state 48

state 95

    (17) command -> PRINT plist optend .

    NEWLINE         reduce using rule 17 (command -> PRINT plist optend .)


state 96

    (45) command -> DEF ID LPAREN . ID RPAREN EQUALS expr
    (46) command -> DEF ID LPAREN . ID RPAREN EQUALS error
    (47) command -> DEF ID LPAREN . error RPAREN EQUALS expr

    ID              shift and go to state 126
    error           shift and go to state 125


state 97

    (82) number -> MINUS INTEGER .

    COMMA           reduce using rule 82 (number -> MINUS INTEGER .)
    NEWLINE         reduce using rule 82 (number -> MINUS INTEGER .)


state 98

    (83) number -> MINUS FLOAT .

    COMMA           reduce using rule 83 (number -> MINUS FLOAT .)
    NEWLINE         reduce using rule 83 (number -> MINUS FLOAT .)


state 99

    (78) numlist -> numlist COMMA . number
    (80) number -> . INTEGER
    (81) number -> . FLOAT
    (82) number -> . MINUS INTEGER
    (83) number -> . MINUS FLOAT

    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 57
    MINUS           shift and go to state 61

    number                         shift and go to state 127

state 100

    (21) command -> READDATA variable EQUALS . plist
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    pitem                          shift and go to state 51
    plist                          shift and go to state 128
    expr                           shift and go to state 53

state 101

    (84) plist -> plist COMMA . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 124
    expr                           shift and go to state 53
    variable                       shift and go to state 48

state 102

    (18) command -> OUT expr EQUALS . plist
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    pitem                          shift and go to state 51
    expr                           shift and go to state 53
    variable                       shift and go to state 48
    plist                          shift and go to state 129

state 103

    (34) command -> FOR ID EQUALS . expr TO expr optstep
    (35) command -> FOR ID EQUALS . error TO expr optstep
    (36) command -> FOR ID EQUALS . expr TO error optstep
    (37) command -> FOR ID EQUALS . expr TO expr STEP error
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 131
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 130

state 104

    (31) command -> IF relexpr THEN . INTEGER
    (33) command -> IF relexpr THEN . error

    INTEGER         shift and go to state 132
    error           shift and go to state 133


state 105

    (68) relexpr -> expr LE . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 134

state 106

    (70) relexpr -> expr GE . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 135

state 107

    (71) relexpr -> expr EQUALS . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 136

state 108

    (72) relexpr -> expr NE . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 137

state 109

    (67) relexpr -> expr LT . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 138

state 110

    (69) relexpr -> expr GT . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 139

state 111

    (32) command -> IF error THEN . INTEGER

    INTEGER         shift and go to state 140


state 112

    (11) command -> LET variable EQUALS . expr
    (12) command -> LET variable EQUALS . error
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 142
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 141

state 113

    (20) command -> LETSTR variable EQUALS . plist
    (84) plist -> . plist COMMA pitem
    (85) plist -> . pitem
    (86) pitem -> . STRING
    (87) pitem -> . STRING expr
    (88) pitem -> . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    STRING          shift and go to state 52
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    pitem                          shift and go to state 51
    plist                          shift and go to state 143
    expr                           shift and go to state 53

state 114

    (53) dimlist -> dimlist COMMA dimitem .

    COMMA           reduce using rule 53 (dimlist -> dimlist COMMA dimitem .)
    NEWLINE         reduce using rule 53 (dimlist -> dimlist COMMA dimitem .)


state 115

    (55) dimitem -> ID LPAREN INTEGER . RPAREN
    (56) dimitem -> ID LPAREN INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 145
    COMMA           shift and go to state 144


state 116

    (76) varlist -> varlist COMMA variable .

    COMMA           reduce using rule 76 (varlist -> varlist COMMA variable .)
    NEWLINE         reduce using rule 76 (varlist -> varlist COMMA variable .)


state 117

    (74) variable -> ID LPAREN expr . RPAREN
    (75) variable -> ID LPAREN expr . COMMA expr RPAREN
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    RPAREN          shift and go to state 146
    COMMA           shift and go to state 147
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 118

    (60) expr -> expr DIVIDE expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 60 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 60 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 60 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 60 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 60 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 60 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 60 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 60 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 60 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 60 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 60 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 60 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 60 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 60 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 60 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 60 (expr -> expr DIVIDE expr .)
    STEP            reduce using rule 60 (expr -> expr DIVIDE expr .)
    POWER           shift and go to state 86

  ! POWER           [ reduce using rule 60 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 85 ]


state 119

    (61) expr -> expr POWER expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 61 (expr -> expr POWER expr .)
    MINUS           reduce using rule 61 (expr -> expr POWER expr .)
    TIMES           reduce using rule 61 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 61 (expr -> expr POWER expr .)
    POWER           reduce using rule 61 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 61 (expr -> expr POWER expr .)
    COMMA           reduce using rule 61 (expr -> expr POWER expr .)
    SEMI            reduce using rule 61 (expr -> expr POWER expr .)
    EQUALS          reduce using rule 61 (expr -> expr POWER expr .)
    LT              reduce using rule 61 (expr -> expr POWER expr .)
    LE              reduce using rule 61 (expr -> expr POWER expr .)
    GT              reduce using rule 61 (expr -> expr POWER expr .)
    GE              reduce using rule 61 (expr -> expr POWER expr .)
    NE              reduce using rule 61 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 61 (expr -> expr POWER expr .)
    TO              reduce using rule 61 (expr -> expr POWER expr .)
    THEN            reduce using rule 61 (expr -> expr POWER expr .)
    STEP            reduce using rule 61 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 85 ]
  ! POWER           [ shift and go to state 86 ]


state 120

    (59) expr -> expr TIMES expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 59 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 59 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 59 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 59 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 59 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 59 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 59 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 59 (expr -> expr TIMES expr .)
    LT              reduce using rule 59 (expr -> expr TIMES expr .)
    LE              reduce using rule 59 (expr -> expr TIMES expr .)
    GT              reduce using rule 59 (expr -> expr TIMES expr .)
    GE              reduce using rule 59 (expr -> expr TIMES expr .)
    NE              reduce using rule 59 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 59 (expr -> expr TIMES expr .)
    TO              reduce using rule 59 (expr -> expr TIMES expr .)
    THEN            reduce using rule 59 (expr -> expr TIMES expr .)
    STEP            reduce using rule 59 (expr -> expr TIMES expr .)
    POWER           shift and go to state 86

  ! POWER           [ reduce using rule 59 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]
  ! TIMES           [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 85 ]


state 121

    (57) expr -> expr PLUS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 57 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 57 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 57 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 57 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 57 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 57 (expr -> expr PLUS expr .)
    LT              reduce using rule 57 (expr -> expr PLUS expr .)
    LE              reduce using rule 57 (expr -> expr PLUS expr .)
    GT              reduce using rule 57 (expr -> expr PLUS expr .)
    GE              reduce using rule 57 (expr -> expr PLUS expr .)
    NE              reduce using rule 57 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 57 (expr -> expr PLUS expr .)
    TO              reduce using rule 57 (expr -> expr PLUS expr .)
    THEN            reduce using rule 57 (expr -> expr PLUS expr .)
    STEP            reduce using rule 57 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86

  ! TIMES           [ reduce using rule 57 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 57 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]


state 122

    (58) expr -> expr MINUS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    PLUS            reduce using rule 58 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 58 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 58 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 58 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 58 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 58 (expr -> expr MINUS expr .)
    LT              reduce using rule 58 (expr -> expr MINUS expr .)
    LE              reduce using rule 58 (expr -> expr MINUS expr .)
    GT              reduce using rule 58 (expr -> expr MINUS expr .)
    GE              reduce using rule 58 (expr -> expr MINUS expr .)
    NE              reduce using rule 58 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 58 (expr -> expr MINUS expr .)
    TO              reduce using rule 58 (expr -> expr MINUS expr .)
    THEN            reduce using rule 58 (expr -> expr MINUS expr .)
    STEP            reduce using rule 58 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86

  ! TIMES           [ reduce using rule 58 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 58 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 88 ]
  ! MINUS           [ shift and go to state 89 ]


state 123

    (65) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    TO              reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 65 (expr -> LPAREN expr RPAREN .)
    STEP            reduce using rule 65 (expr -> LPAREN expr RPAREN .)


state 124

    (84) plist -> plist COMMA pitem .

    COMMA           reduce using rule 84 (plist -> plist COMMA pitem .)
    NEWLINE         reduce using rule 84 (plist -> plist COMMA pitem .)
    SEMI            reduce using rule 84 (plist -> plist COMMA pitem .)


state 125

    (47) command -> DEF ID LPAREN error . RPAREN EQUALS expr

    RPAREN          shift and go to state 148


state 126

    (45) command -> DEF ID LPAREN ID . RPAREN EQUALS expr
    (46) command -> DEF ID LPAREN ID . RPAREN EQUALS error

    RPAREN          shift and go to state 149


state 127

    (78) numlist -> numlist COMMA number .

    COMMA           reduce using rule 78 (numlist -> numlist COMMA number .)
    NEWLINE         reduce using rule 78 (numlist -> numlist COMMA number .)


state 128

    (21) command -> READDATA variable EQUALS plist .
    (84) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 21 (command -> READDATA variable EQUALS plist .)
    COMMA           shift and go to state 101


state 129

    (18) command -> OUT expr EQUALS plist .
    (84) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 18 (command -> OUT expr EQUALS plist .)
    COMMA           shift and go to state 101


state 130

    (34) command -> FOR ID EQUALS expr . TO expr optstep
    (36) command -> FOR ID EQUALS expr . TO error optstep
    (37) command -> FOR ID EQUALS expr . TO expr STEP error
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    TO              shift and go to state 150
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 131

    (35) command -> FOR ID EQUALS error . TO expr optstep

    TO              shift and go to state 151


state 132

    (31) command -> IF relexpr THEN INTEGER .

    NEWLINE         reduce using rule 31 (command -> IF relexpr THEN INTEGER .)


state 133

    (33) command -> IF relexpr THEN error .

    NEWLINE         reduce using rule 33 (command -> IF relexpr THEN error .)


state 134

    (68) relexpr -> expr LE expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 68 (relexpr -> expr LE expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 135

    (70) relexpr -> expr GE expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 70 (relexpr -> expr GE expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 136

    (71) relexpr -> expr EQUALS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 71 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 137

    (72) relexpr -> expr NE expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 72 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 138

    (67) relexpr -> expr LT expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 67 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 139

    (69) relexpr -> expr GT expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    THEN            reduce using rule 69 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 140

    (32) command -> IF error THEN INTEGER .

    NEWLINE         reduce using rule 32 (command -> IF error THEN INTEGER .)


state 141

    (11) command -> LET variable EQUALS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    NEWLINE         reduce using rule 11 (command -> LET variable EQUALS expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 142

    (12) command -> LET variable EQUALS error .

    NEWLINE         reduce using rule 12 (command -> LET variable EQUALS error .)


state 143

    (20) command -> LETSTR variable EQUALS plist .
    (84) plist -> plist . COMMA pitem

    NEWLINE         reduce using rule 20 (command -> LETSTR variable EQUALS plist .)
    COMMA           shift and go to state 101


state 144

    (56) dimitem -> ID LPAREN INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 152


state 145

    (55) dimitem -> ID LPAREN INTEGER RPAREN .

    COMMA           reduce using rule 55 (dimitem -> ID LPAREN INTEGER RPAREN .)
    NEWLINE         reduce using rule 55 (dimitem -> ID LPAREN INTEGER RPAREN .)


state 146

    (74) variable -> ID LPAREN expr RPAREN .

    PLUS            reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    MINUS           reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    TIMES           reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    POWER           reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    STEP            reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    COMMA           reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    THEN            reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    EQUALS          reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    SEMI            reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    LT              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    LE              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    GT              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    GE              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    NE              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    RPAREN          reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)
    TO              reduce using rule 74 (variable -> ID LPAREN expr RPAREN .)


state 147

    (75) variable -> ID LPAREN expr COMMA . expr RPAREN
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 153

state 148

    (47) command -> DEF ID LPAREN error RPAREN . EQUALS expr

    EQUALS          shift and go to state 154


state 149

    (45) command -> DEF ID LPAREN ID RPAREN . EQUALS expr
    (46) command -> DEF ID LPAREN ID RPAREN . EQUALS error

    EQUALS          shift and go to state 155


state 150

    (34) command -> FOR ID EQUALS expr TO . expr optstep
    (36) command -> FOR ID EQUALS expr TO . error optstep
    (37) command -> FOR ID EQUALS expr TO . expr STEP error
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 157
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 156

state 151

    (35) command -> FOR ID EQUALS error TO . expr optstep
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 158

state 152

    (56) dimitem -> ID LPAREN INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 159


state 153

    (75) variable -> ID LPAREN expr COMMA expr . RPAREN
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    RPAREN          shift and go to state 160
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 154

    (47) command -> DEF ID LPAREN error RPAREN EQUALS . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 161

state 155

    (45) command -> DEF ID LPAREN ID RPAREN EQUALS . expr
    (46) command -> DEF ID LPAREN ID RPAREN EQUALS . error
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 163
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 162

state 156

    (34) command -> FOR ID EQUALS expr TO expr . optstep
    (37) command -> FOR ID EQUALS expr TO expr . STEP error
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr
    (38) optstep -> . STEP expr
    (39) optstep -> . empty
    (89) empty -> .

    STEP            shift and go to state 164
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86
    NEWLINE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 166
    optstep                        shift and go to state 165

state 157

    (36) command -> FOR ID EQUALS expr TO error . optstep
    (38) optstep -> . STEP expr
    (39) optstep -> . empty
    (89) empty -> .

    STEP            shift and go to state 167
    NEWLINE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 166
    optstep                        shift and go to state 168

state 158

    (35) command -> FOR ID EQUALS error TO expr . optstep
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr
    (38) optstep -> . STEP expr
    (39) optstep -> . empty
    (89) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86
    STEP            shift and go to state 167
    NEWLINE         reduce using rule 89 (empty -> .)

    empty                          shift and go to state 166
    optstep                        shift and go to state 169

state 159

    (56) dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .

    COMMA           reduce using rule 56 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)
    NEWLINE         reduce using rule 56 (dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN .)


state 160

    (75) variable -> ID LPAREN expr COMMA expr RPAREN .

    PLUS            reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    POWER           reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    STEP            reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NEWLINE         reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    THEN            reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    EQUALS          reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    SEMI            reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LT              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    LE              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GT              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    GE              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    NE              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)
    TO              reduce using rule 75 (variable -> ID LPAREN expr COMMA expr RPAREN .)


state 161

    (47) command -> DEF ID LPAREN error RPAREN EQUALS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    NEWLINE         reduce using rule 47 (command -> DEF ID LPAREN error RPAREN EQUALS expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 162

    (45) command -> DEF ID LPAREN ID RPAREN EQUALS expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    NEWLINE         reduce using rule 45 (command -> DEF ID LPAREN ID RPAREN EQUALS expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 163

    (46) command -> DEF ID LPAREN ID RPAREN EQUALS error .

    NEWLINE         reduce using rule 46 (command -> DEF ID LPAREN ID RPAREN EQUALS error .)


state 164

    (37) command -> FOR ID EQUALS expr TO expr STEP . error
    (38) optstep -> STEP . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    error           shift and go to state 171
    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 170

state 165

    (34) command -> FOR ID EQUALS expr TO expr optstep .

    NEWLINE         reduce using rule 34 (command -> FOR ID EQUALS expr TO expr optstep .)


state 166

    (39) optstep -> empty .

    NEWLINE         reduce using rule 39 (optstep -> empty .)


state 167

    (38) optstep -> STEP . expr
    (57) expr -> . expr PLUS expr
    (58) expr -> . expr MINUS expr
    (59) expr -> . expr TIMES expr
    (60) expr -> . expr DIVIDE expr
    (61) expr -> . expr POWER expr
    (62) expr -> . INTEGER
    (63) expr -> . FLOAT
    (64) expr -> . variable
    (65) expr -> . LPAREN expr RPAREN
    (66) expr -> . MINUS expr
    (73) variable -> . ID
    (74) variable -> . ID LPAREN expr RPAREN
    (75) variable -> . ID LPAREN expr COMMA expr RPAREN

    INTEGER         shift and go to state 49
    FLOAT           shift and go to state 46
    LPAREN          shift and go to state 47
    MINUS           shift and go to state 50
    ID              shift and go to state 44

    variable                       shift and go to state 48
    expr                           shift and go to state 170

state 168

    (36) command -> FOR ID EQUALS expr TO error optstep .

    NEWLINE         reduce using rule 36 (command -> FOR ID EQUALS expr TO error optstep .)


state 169

    (35) command -> FOR ID EQUALS error TO expr optstep .

    NEWLINE         reduce using rule 35 (command -> FOR ID EQUALS error TO expr optstep .)


state 170

    (38) optstep -> STEP expr .
    (57) expr -> expr . PLUS expr
    (58) expr -> expr . MINUS expr
    (59) expr -> expr . TIMES expr
    (60) expr -> expr . DIVIDE expr
    (61) expr -> expr . POWER expr

    NEWLINE         reduce using rule 38 (optstep -> STEP expr .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 85
    POWER           shift and go to state 86


state 171

    (37) command -> FOR ID EQUALS expr TO expr STEP error .

    NEWLINE         reduce using rule 37 (command -> FOR ID EQUALS expr TO expr STEP error .)

